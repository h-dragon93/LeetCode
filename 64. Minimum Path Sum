import heapq

class Solution(object):
    def minPathSum(self, grid):
        m = len(grid)                           # grid = [[1,3,1],[1,5,1],[4,2,1]]
        n = len(grid[0])                        # grid[0] = [1,3,1]

        dx = [0, 1]                             # 방향 벡터
        dy = [1, 0]

        visited = [[False] * n for _ in range(m)]  # 방문 노드 visited = [[False, False, False], [False, False, False], [False, False, False]]
        queue = []
        
        heapq.heappush(queue, (grid[0][0], 0, 0))       # q = [(1, 0, 0)]    // (cost, x, y)

        visited[0][0] = True

        while True:
            cost, x, y = heapq.heappop(queue)

            if x == m - 1 and y == n - 1:
                return cost

            for i in range(2):                  #    i = 0, 1
                nx = x + dx[i]
                ny = y + dy[i]

                if nx >= m or ny >= n or visited[nx][ny]:
                    continue

                heapq.heappush(queue, (cost + grid[nx][ny], nx, ny))
                visited[nx][ny] = True
